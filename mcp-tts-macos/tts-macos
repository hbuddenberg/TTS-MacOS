#!/usr/bin/env python3
"""
TTS macOS - Herramienta de l√≠nea de comandos para Text-to-Speech
Uso: tts-macos "tu texto aqu√≠" --voice monica --rate 175
"""

import argparse
import subprocess
import sys
from pathlib import Path

# Voces disponibles
VOCES = {
    "monica": "Monica",
    "paulina": "Paulina", 
    "jorge": "Jorge",
    "juan": "Juan",
    "diego": "Diego",
    "angelica": "Angelica"
}

def hablar(texto, voz="monica", velocidad=175):
    """Reproduce texto usando TTS de macOS"""
    voz_capitalizada = VOCES.get(voz.lower(), "Monica")
    
    try:
        subprocess.run(
            ["say", "-v", voz_capitalizada, "-r", str(velocidad), texto],
            check=True
        )
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al reproducir: {e}", file=sys.stderr)
        return False
    except FileNotFoundError:
        print("‚ùå Comando 'say' no encontrado. ¬øEst√°s en macOS?", file=sys.stderr)
        return False

def guardar(texto, archivo, voz="monica"):
    """Guarda texto como archivo de audio"""
    voz_capitalizada = VOCES.get(voz.lower(), "Monica")
    
    # Asegurar extensi√≥n .aiff
    if not archivo.endswith(".aiff"):
        archivo += ".aiff"
    
    try:
        subprocess.run(
            ["say", "-v", voz_capitalizada, "-o", archivo, texto],
            check=True
        )
        print(f"‚úÖ Audio guardado en: {archivo}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al guardar: {e}", file=sys.stderr)
        return False

def listar_voces():
    """Lista las voces disponibles"""
    print("\nüé§ Voces disponibles en espa√±ol:\n")
    voces_info = {
        "monica": "Espa√±ol M√©xico (Mujer)",
        "paulina": "Espa√±ol M√©xico (Mujer)",
        "jorge": "Espa√±ol Espa√±a (Hombre)",
        "juan": "Espa√±ol Espa√±a (Hombre)",
        "diego": "Espa√±ol Argentina (Hombre)",
        "angelica": "Espa√±ol M√©xico (Mujer)"
    }
    
    for voz, descripcion in voces_info.items():
        print(f"  ‚Ä¢ {voz:10} - {descripcion}")
    
    print("\nüí° Uso: tts-macos \"tu texto\" --voice jorge\n")

def main():
    parser = argparse.ArgumentParser(
        description="üéôÔ∏è  TTS macOS - Convierte texto a voz usando el TTS nativo de macOS",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos de uso:
  tts-macos "Hola mundo"
  tts-macos "Buenos d√≠as" --voice jorge
  tts-macos "Texto r√°pido" --rate 250
  tts-macos "Mensaje" --save mi_audio.aiff
  tts-macos --list
  tts-macos "Hola" --voice paulina --rate 200 --save saludo.aiff

Voces disponibles: monica, paulina, jorge, juan, diego, angelica
        """
    )
    
    parser.add_argument(
        "texto",
        nargs="?",
        help="Texto a convertir en voz"
    )
    
    parser.add_argument(
        "-v", "--voice",
        default="monica",
        choices=list(VOCES.keys()),
        help="Voz a utilizar (default: monica)"
    )
    
    parser.add_argument(
        "-r", "--rate",
        type=int,
        default=175,
        help="Velocidad en palabras por minuto (100-300, default: 175)"
    )
    
    parser.add_argument(
        "-s", "--save",
        metavar="ARCHIVO",
        help="Guardar audio en archivo (formato .aiff)"
    )
    
    parser.add_argument(
        "-l", "--list",
        action="store_true",
        help="Listar voces disponibles"
    )
    
    parser.add_argument(
        "--version",
        action="version",
        version="tts-macos 1.0.0"
    )
    
    args = parser.parse_args()
    
    # Listar voces
    if args.list:
        listar_voces()
        return 0
    
    # Validar que hay texto
    if not args.texto:
        parser.print_help()
        return 1
    
    # Validar velocidad
    if not 100 <= args.rate <= 300:
        print("‚ö†Ô∏è  Velocidad debe estar entre 100 y 300 palabras por minuto", file=sys.stderr)
        return 1
    
    # Guardar archivo
    if args.save:
        success = guardar(args.texto, args.save, args.voice)
        if not success:
            return 1
    
    # Reproducir audio
    success = hablar(args.texto, args.voice, args.rate)
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
